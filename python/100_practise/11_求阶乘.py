#1、求阶乘：一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，并且0的阶乘为1。比如3的阶乘：3*2*1

#1for循环
num = int(input("请输入一个数字：")) 
sum = 1
for i in range(1,num+1):
    sum *= i
print(sum)


# 这段代码计算了用户输入的数字的阶乘，并将结果打印出来。让我解释一下代码的运行过程：
# 用户被要求输入一个数字，这个数字会被保存在变量 num 中。int(input("输入一个数字:")) 用来获取用户的输入，并将其转换为整数。
# 接下来，定义了一个变量 sum 并初始化为 1。这个变量将用来存储计算的结果。
# 使用 for 循环来迭代从 1 到 num（包括 num）的所有整数。range(1, num+1) 用来生成一个从 1 到 num 的整数序列。
# 在循环中，每次迭代，将 sum 与当前迭代的整数相乘，然后将结果存回到 sum 中。这实际上是在计算阶乘。例如，如果 num 是 5，那么循环执行如下操作：

# 第一次循环：sum = 1 * 1 = 1
# 第二次循环：sum = 1 * 2 = 2
# 第三次循环：sum = 2 * 3 = 6
# 第四次循环：sum = 6 * 4 = 24
# 第五次循环：sum = 24 * 5 = 120
# 循环结束后，变量 sum 包含了用户输入数字的阶乘。
# 最后，使用 print(sum) 将计算结果打印出来。
# 所以，代码的输出将是用户输入数字的阶乘。


#递归写法
def recursion_1(num):   #定义了一个名为 recursion_1 的函数，该函数接受一个参数 num，表示要计算阶乘的数。
    if num == 1:        #判断递归的终止条件。如果 num 的值等于 1，就返回 1，因为 1 的阶乘就是 1。
        return num
# 如果 num 不等于 1，那么会执行 else 分支的代码，
# 其中 return num * recursion_1(num - 1) 用来递归计算阶乘。
# 具体操作是将 num 与 recursion_1(num - 1) 相乘，
# 而 recursion_1(num - 1) 的调用会继续递归计算 (num - 1) 的阶乘，直到递归到 num 等于 1 为止。
    else:               
        return num * recursion_1(num - 1)
n = 3
print(recursion_1(n))  


