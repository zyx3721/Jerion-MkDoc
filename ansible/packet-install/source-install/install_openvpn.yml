--- 
# ansible_playbook install_openvpn.yml

- import_playbook: uninstall-rpm-openssl.yml
- import_playbook: install-openssl.yml
- import_playbook: install-libnl3.yml
- import_playbook: install-go.yml

- name: Install OpenVPN Server 
  hosts: centos7
  become: true
  vars:
    openvpn_version: 2.6.12
    openvpn_download_path: /usr/local/src
    openvpn_install_path: /usr/local/openvpn
    openvpn_tar_file: /usr/local/src/openvpn-{{ openvpn_version }}.tar.gz
    openvpn_narchive_path: /usr/local/src/openvpn-{{ openvpn_version }}
    openvpn_download_url: http://mirrors.sunline.cn/source/openvpn/openvpn-{{ openvpn_version }}.tar.gz
    openvpn_ovpn_file: cloud.ovpn

  tasks:
    - name: Detecting Operating System
      fail:
        msg: "Only Supports the Redhat family. Currently{{ ansible_distribution }}-{{ ansible_distribution_version }} (Family: {{ ansible_os_family }})"
      when: ansible_os_family != "RedHat"

    - name: Check If OpenVPN source is not installed
      stat:
        path: "{{ openvpn_install_path }}"
      register: openvpn_directory
      ignore_errors: true

    - name: If OpenVPN source is already installed, skip it
      fail:
        msg: " OpenVPN is already installed, skipping..."
      when: openvpn_directory.stat.exists

    - name: Stop Firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: Disable SELinux
      shell: setenforce 0 && sed -i 's/enforcing/disabled/' /etc/selinux/config
      when: ansible_selinux.status == "enabled"

    - name: Enable IPv4 Net 
      shell: |
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
        sysctl -p

    - name: Install Rely
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - autoconf
        - automake
        - bison
        - flex
        - cmake
        - iproute
        - lz4-devel
        - lzo-devel
        - pam-devel
        - p11-kit-devel
        - libselinux-devel
        - systemd-devel
        - libcap-ng-devel
        - pkcs11-helper-devel
        - sqlite-devel
        - libtool
        - libtool-ltdl

    # --no-check-certificate
    - name: Download OpenVPN Source Package
      get_url:
        url: "{{ openvpn_download_url }}"
        dest: "{{ openvpn_download_path }}"
        mode: '0644'
        force: true
        timeout: 15

    - name: Ensure OpenVPN source directory exists
      file:
        path: "{{ openvpn_download_path }}"
        state: directory

    - name: Unarchive OpenVPN Source Package
      unarchive:
        src: "{{ openvpn_tar_file}}"
        dest: "{{ openvpn_download_path }}"
        remote_src: yes
    
    - name: Configure OpenVPN
      command: | 
        ./configure \
        --prefix={{ openvpn_install_path }} \
        --enable-lzo \
        --enable-lz4 \
        --enable-debug \
        --enable-management \
        --enable-async_push \
        --enable-plugins \
        --enable-port-share \
        --enable-static \
        --enable-plugin-auth-pam \
        --enable-pam-dlopen \
        --enable-silent-rules \
        --enable-x509-alt-username \
        --enable-pkcs11 \
        --enable-selinux \
        --with-crypto-library=openssl \
        --with-gnu-ld \
        --with-openssl-engine=auto \
        --enable-iproute2 \
        --enable-systemd
      args:
        chdir: "{{ openvpn_narchive_path }}"

    - name: Make OpenVPN
      shell: |
        make -j $(nproc)
      args:
        chdir: "{{ openvpn_narchive_path }}"

    - name: Make Install OpenVPN
      shell: |
        make install
      args:
        chdir: "{{ openvpn_narchive_path }}"

    - name: Create OpenVPN cloud.ovpn Configuration File
      copy:
        dest: "{{ openvpn_install_path }}/config/{{ openvpn_ovpn_file }}"
        mode: 0644
        content: |
          dev tun

    - name: Create Link
      file:
        src: "{{ openvpn_install_path }}/sbin/{{ openvpn_ovpn_file }}"
        dest: "/usr/sbin/{{ openvpn_ovpn_file }}"
        state: link
        force: yes

    - name: Clean File
      file: 
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ openvpn_tar_file }}"
        - "{{ openvpn_narchive_path}}"

    # - name: Create OpenVPN Configuration Directory
    #   file:
    #     path: "{{ openvpn_install_path }}/config"
    #     state: directory

    # - name: Setup OpenVPN Service
    #   copy:
    #     dest: /usr/lib/systemd/system/openvpn.service
    #     mode: 0644
    #     content: |
    #       [Unit]
    #       Description=OpenVPN service for server
    #       After=syslog.target network-online.target
    #       Wants=network-online.target
    #       Documentation=man:openvpn(8)
    #       Documentation=https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage
    #       Documentation=https://community.openvpn.net/openvpn/wiki/HOWTO

    #       [Service]
    #       Type=notify
    #       PrivateTmp=true
    #       WorkingDirectory={{ openvpn_install_path }}
    #       ExecStart={{ openvpn_install_path }}/sbin/openvpn --config {{ openvpn_install_path }}/config/{{ openvpn_ovpn_file }}
    #       CapabilityBoundingSet=CAP_IPC_LOCK CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_SETGID CAP_SETUID CAP_SETPCAP CAP_SYS_CHROOT CAP_DAC_OVERRIDE CAP_AUDIT_WRITE
    #       LimitNPROC=10
    #       DeviceAllow=/dev/null rw
    #       DeviceAllow=/dev/net/tun rw
    #       ProtectHome=true
    #       KillMode=process
    #       RestartSec=5s
    #       Restart=always

    #       [Install]
    #       WantedBy=multi-user.target        

    # - name: Reload systemd to apply the new service
    #   command: systemctl daemon-reload

    # - name: Enable and start OpenVPN service
    #   systemd:
    #     name: openvpn
    #     enabled: yes
    #     state: started

    # - name: Verify OpenVPN installation
    #   shell: openvpn --version
    #   register: openvpn_version
    #   ignore_errors: true
    
    # - name: If OpenVPN is not installed, fail the play
    #   fail:
    #     msg: "OpenVPN installation failed"
    #     when: openvpn_version.rc != 0
    
    # - name: Clean File
    #   file: 
    #     path: "{{ item }}"
    #     state: absent
    #   loop:
    #     - "{{ openvpn_tar_file }}"
    #     - "{{ openvpn_narchive_path}}"
    
  

